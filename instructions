1. first install yarn (it is just like npm (manager)) , fast , cuncurrent etcs , it adds all dependency files (like type scripts).
2. understand each and every file.
    -> monorepo means ham ek hi repo ke andar apna frontend , backend , libraries rakh sakte haii and usko turbo repo manage krta haii
    -> in apps ,it setups different projects which are docs and web they have their own package.json
3. if i write this command #yarn dev , jitne bhi projects honge wo up and running hojaenges.
4. uske link pe click krke khol liya karo 

making nodejs server

1.uska naam karan karo aur usmein dependency download karo via cli. {yarn workspace server add typescript -D} (ye tarika haii)
-> har ek alag server (ya app) ka ek workspace hota haii jiska naam inside uske package.json mein hota haii usko use krke kro dependencies install.

2. yarn workspace server add tsc-watch -D (by this tsc dependency i can compile typescript in watch mode)

(typescript is javascript)

3.now we changed start and end in the tsconfig which is created
4.then add the scipts in package.json (// ye saari commands haii jo run karengi).

5. main jis level pe yarn dev karunga usi level ke aage se applications chalu karega turbo repo 

6. now initialise server and ports (on which the server will start)

7. now inculcate socket.io as a service.

8. now we use that service of socket made by us on our server which we made , and attach this socket service to our http server.



asli logic

-> we can emit messages (send them to the server)
-> and all the users who have subscrubed to the message can recieve the message

->socket mein new message aane ke liye new socket connect hone ka system banaya haii aur console karega ki new message recieved (ek socket par ek hi message aa sakta haii ek baari mein). aur isko call krdenge in index.js

-> inko (event listners of socket) server initialize krte samay hi initialise krlo 

-> client idhar aaenege aur ek event initialise karr sakte haii wo which is message

-> now we have created all 3 things server , socket and socket listner

Frontend

->web/app is our front end
-> we create context for frontend to make our fontend modular
-> context is a wrapper for similar kind of things 
-> interface is a structure we have to implement the functions inside them

=> ham apne front end pe ek text grasp karenege via sendmessage field this field will transport our message to socket server
=> iss kaam ke liye we will be using an library form socket.io
=> fontend par we use socket.io client and backend par socket.io.
=> ye saari dependency add karo via yarn , then import then use them okay.

-> web wale package.json mein import karni haii ye library
-> taaki socket_provider use karr sake iss library ko inside sendmessage funtion to send message to socket server
-> we imported io form the dependency ab iss io se ham apne server ke saath ek connection bana sakte haii 
-> we are connecting socket server and frontend by useEffect Hook.
-> changes in layout (saari app ko socket ka acces de diya haii)
-> now we try to run this and as we refresh we get some errors due to ki uske uppar cors policy enabled ni haii. 
-> now we get new socket connected ids print.(servers ke saath ahamara client connection bana raha haii).

-> ab message ko emmit krne ke liye custom hook banate haii socket provider ke andar(BE)
-> ab frontend ko design karte haii (desging ke liye koi bhi library use karlo) inside (page.tsx)

-> socket.emit ke andar ek event pass hota haii
-> more to watch video

-> ab ye message sab server tak bhejna haii agar tohh hamko ye msg jo emit karr paa rahe haii ye redis server ko dena hoga 

setting up redis server

-> online free subscribe krlo service ko then backend pe jaise hi koi message aata haii we have to code there only (disable ssl) [it encrypt the in and out data].
-> for transfer of this message we have to use an library "ioredis"
-> now we need 2 connections to redis 1-> publishing the message , 2->subscribing the message (pub/sub arch.).
-> we also need a tool k/a redis insights (for visualising the redis data)
-> 


